AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aws-alexa-smart-home-demogit stat
      
#Mappings: 
#  Config: 
#    Alexa:                           
#      # This value must match the name of the AWS Secrets Manager secret that
#      # contains your Alexa SkillId, VendorId, and CustomerId:       
#      SecretName: AlexaSmartHomeSkillCredentials
#    ForceUpdate:
#      UpdateString: xxxx # Change this to *any* value to force an update to resources that rely on resolving values from the manually-created secret named "AlexaSmartHomeSkillCredentials" in AWS Secrets Manager 

#Conditions: 
#  UpdateResourceCondition: 
#    !Not [ !Equals [ !FindInMap [ Config, ForceUpdate, UpdateString ], do_not_update ] ]

Parameters:
  UsePhysicalDevice:
    Type: String
    AllowedValues: 
      - "true"
      - "false"
    Description: Will a physical device (i.e. ESP32) be used for your thermostat?
    Default: "false"

  AlexaSkillId:
    Type: String
    Description: Your Alexa Skill ID as shown from the Alexa Developer Console
    NoEcho: true

  AlexaVendorId:
    Type: String
    Description: Your Alexa Vendor ID as shown from the Alexa Developer Console
    NoEcho: true

Globals:
  Function:
    Runtime: nodejs10.x
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        DEVICE_TABLE: !Ref DeviceTable
        STACK_NAME: !Ref AWS::StackName

Resources:

  ##############################################################################
  CloudFormationResponseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      Description: Contains a sync and async helper function to send responses to CloudFormation for custom resources
      ContentUri: lambda/layers/cfn-response/
      CompatibleRuntimes:
        - nodejs10.x
        - nodejs8.10
      LicenseInfo: 'MIT'

  ##############################################################################
  IotEndpoint:
    Type: 'Custom::IotEndpoint'
    Properties:
      ServiceToken: !GetAtt IotEndpointProvider.Arn

  IotEndpointProvider:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      CodeUri: lambda/functions/cfProvider-iotEndpoint/
      Layers:
        - !Ref CloudFormationResponseLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 
              - iot:DescribeEndpoint
            Resource:
              - '*'


  ##############################################################################
  CognitoClientSecret:
    Type: 'Custom::CognitoClientSecret'
    Properties:
      ServiceToken: !GetAtt CognitoClientSecretProvider.Arn
      UserPoolId:  !Ref CognitoUserPool
      AppClientId: !Ref CognitoAlexaAppClient
      ForceDeleteWithoutRecovery: true

  CognitoClientSecretProvider:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      CodeUri: lambda/functions/cfProvider-cognitoClientSecret/
      MemorySize: 128
      Layers:
        - !Ref CloudFormationResponseLayer
      Policies:
        # TODO: Scope down this policy, it is overly permissive
        - Version: '2012-10-17'
          Statement:
          - 
            Sid: "CognitoPermissions"
            Effect: Allow
            Action: 
              - 'cognito-idp:DescribeUserPoolClient'
            Resource:
              - '*'
          - 
            Sid: "SecretsManagerPermissions"
            Effect: Allow
            Action: 
              - 'secretsmanager:CreateSecret'
              - 'secretsmanager:TagResource'
              - 'secretsmanager:UpdateSecret'
              - 'secretsmanager:DeleteSecret'
            Resource:
              - '*'
  

  ##############################################################################
  
  CognitoSMSRoleExternalId:
    Type: 'Custom::Uuid'
    Properties:
      ServiceToken: !GetAtt UuidProvider.Arn

  UuidProvider:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: lambda/functions/cfProvider-uuid/
      MemorySize: 128
      Layers:
        - !Ref CloudFormationResponseLayer


  ##############################################################################


  ##############################################################################

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    DependsOn: CognitoSMSPolicy
    Properties: 
      AdminCreateUserConfig: 
        AllowAdminCreateUserOnly: False
      AutoVerifiedAttributes:
        - 'phone_number'
      MfaConfiguration: 'ON'    # Required for Alexa
      Policies: 
        PasswordPolicy: 
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
          TemporaryPasswordValidityDays: 7
      UsernameAttributes: 
        - 'phone_number'
      SmsConfiguration:          
        # The ExternalId must match the sts:ExternalId specified in the trust 
        # policy of the IAM role references by SnsCallerArn. The external ID
        # should be a random ID; to allow for automated deployment, we use a
        # custom CloudFormation resource that generates a V4 UUID:
        ExternalId: !GetAtt CognitoSMSRoleExternalId.uuid        
        SnsCallerArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/service-role/${CognitoSMSRole}"
  
  # App Client that allows Alexa to interact with our Cognito User Pool:
  CognitoAlexaAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      GenerateSecret: true
      UserPoolId: !Ref CognitoUserPool

  # Note - the Callback URL below contains your Alexa vendor ID and is passed
  # to the custom Lambda resource in the API call in plain text. As your vendor
  # ID is a secret, this method is not secure. TODO: update code to pass the
  # secret name to the custom Lambda, rather than the secret value. Then, the
  # Lambda should retrieve the secret value itself directly from AWS Secrets Manager. 
  CognitoClientConfiguration:
    Type: 'Custom::CognitoClientConfiguration'
#    Condition: UpdateResourceCondition
    Properties:
      ServiceToken: !GetAtt CognitoClientConfigurationProvider.Arn
      UserPoolId: !Ref CognitoUserPool
      UserPoolClientId: !Ref CognitoAlexaAppClient
      SupportedIdentityProviders:
        - COGNITO
      CallbackURL:
          Fn::Join:
            - ""
            - - "https://pitangui.amazon.com/api/skill/link/"
              - !Ref AlexaVendorId
#              - !Sub 
#                - '{{resolve:secretsmanager:${AlexaSecretName}:SecretString:VendorId}}'
#                - { AlexaSecretName: !FindInMap [Config, Alexa, SecretName]}
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - "code"
        - implicit
      AllowedOAuthScopes:
        - openid
        - phone
  
  CognitoClientConfigurationProvider: 
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      CodeUri: lambda/functions/cfProvider-cognitoClientConfiguration/
      MemorySize: 128
      Layers:
        - !Ref CloudFormationResponseLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
          -
            Effect: Allow
            Action: 'cognito-idp:UpdateUserPoolClient'
            Resource: 'arn:aws:cognito-idp:*:*:userpool/*'

  CognitoDomain:
    Type: 'Custom::CognitoUserPoolDomain'
    Properties:
      ServiceToken: !GetAtt CognitoDomainProvider.Arn
      DomainPrefix: !Sub "${AWS::AccountId}-${AWS::StackName}-domain"   # Note - stack name cannot contain 'aws' or creation will fail
      UserPoolId: !Ref CognitoUserPool
      ClientId: !Sub CognitoAlexaAppClient

  CognitoDomainProvider:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      CodeUri: lambda/functions/cfProvider-cognitoUserPoolDomain/
      MemorySize: 128
      Layers:
        - !Ref CloudFormationResponseLayer
      Policies:
        - Version: '2012-10-17'
          Statement:
          -
            Effect: Allow
            Action: 'cognito-idp:CreateUserPoolDomain'
            Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
          -
            Effect: Allow
            Action: 'cognito-idp:DeleteUserPoolDomain'
            Resource: 'arn:aws:cognito-idp:*:*:userpool/*'
          -
            Effect: Allow
            Action: 'cognito-idp:DescribeUserPoolDomain'
            Resource: '*'

  CognitoSMSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                # The ExternalId below must match the ExternalId we specify
                # in the Cognito User Pool's SMS configuration; otherwise, the
                # Cognito User Pool will fail to create:
                "sts:ExternalId": !GetAtt CognitoSMSRoleExternalId.uuid
      Path: "/service-role/"

  CognitoSMSPolicy: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: !Sub "${AWS::StackName}-CognitoSMSPolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - "sns:publish"
            Resource: 
              - "*"
      Roles: 
        - Ref: CognitoSMSRole

  VerifyCognitoTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/cognito-verifyAuthToken/
      Handler: index.handler
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          REGION: !Ref "AWS::Region"
          APP_CLIENT_ID: !Ref CognitoAlexaAppClient

  ##############################################################################

  AlexaSkillFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/alexa-skill/
      Handler: index.handler
      Environment:
        Variables:
          GET_DEVICES_BY_USER_FUNCTION: !Ref GetDevicesByUserFunction
          VERIFY_COGNITO_TOKEN_FUNCTION: !Ref VerifyCognitoTokenFunction
          IOT_ENDPOINT: !GetAtt IotEndpoint.IotEndpointAddress
          USE_PHYSICAL_DEVICE: !Ref UsePhysicalDevice
      Policies:
        - Statement:
          - 
            Sid: InvokeOtherFunctions
            Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: 
              - !GetAtt GetDevicesByUserFunction.Arn
              - !GetAtt VerifyCognitoTokenFunction.Arn
        - Statement:
          - 
            Sid: UpdateIotThingShadow
            Effect: Allow
            Action:
              - iot:*
            Resource: "*"
        - Statement:
          - 
            Sid: ReadFromDynamoDB
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
            Resource: "*"

  AlexaSkillFunctionPermission:
    Type: AWS::Lambda::Permission
    DependsOn: AlexaSkillFunction
#    Condition: UpdateResourceCondition
    Properties:
        Action: lambda:InvokeFunction
        EventSourceToken: 
          !Ref AlexaSkillId
#          !Sub 
#            - '{{resolve:secretsmanager:${AlexaSecretName}:SecretString:SkillId}}'
#            - { AlexaSecretName: !FindInMap [Config, Alexa, SecretName]}
        FunctionName: !GetAtt AlexaSkillFunction.Arn
        Principal: alexa-connectedhome.amazon.com

  ##############################################################################

  SmartHomeThing:
    Type: AWS::IoT::Thing
    Properties: 
      AttributePayload:
        Attributes: 
          modelNumber: 'smartThing-v1'
          firmwareVersion: '1.00'
          serialNumber: '1234556789'

  # Today, AWS IoT Core allows standard MQTT last will messages to be specified, 
  # and it does send them to the proper shadow topics, but the LWT specifically
  # cannot directly update the IoT device shadow. We have to use a workaround
  # by which we specify the LWT topic to publish to a custom topic rather than
  # the device shadow; we use the rule below to republish the LWT to the actual
  # reserved aws shadow topic, thus ensuring our LWT makes required changes to the
  # shadow. See link below for details: 
  # https://docs.aws.amazon.com/iot/latest/developerguide/device-shadow-data-flow.html  
  IoTRuleRepublishLastWill:
    Type: AWS::IoT::TopicRule
    Properties: 
      TopicRulePayload: 
        Sql: "SELECT * FROM 'alexaSmartHomeDemo/lastWill/+'"
        RuleDisabled: false
        Actions: 
          - Republish:
              Topic: "$$aws/things/${topic(3)}/shadow/update"
              RoleArn: !GetAtt IotRulesRole.Arn
            

  IotRulesRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "iot.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/service-role/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSIoTRuleActions"

  IoTThingPolicy:
    Type: AWS::IoT::Policy
    Properties: 
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": "iot:*",
            "Resource": "*"
          }
        ]
      }

  ##############################################################################

  CreateThingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/iot-createThing/
      Handler: index.handler
      Policies:
        - Statement:
          - 
            Sid: IoTCreateThingPolicy
            Effect: Allow
            Action:
              - iot:CreateThing
              - iot:DescribeThing
              - iot:UpdateThing
            Resource: '*'

  AssociateThingToUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/ddb-associateThingToUser/
      Handler: index.handler
      Policies:
        - Statement:
          - 
            Sid: DynamoDBCrudPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:DeleteItem
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
              - dynamodb:DescribeTable
            Resource: 
              - !GetAtt DeviceTable.Arn
              - !Sub "${DeviceTable.Arn}/index/*"

  CreateDeviceTypeFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/ddb-createThingType/
      Handler: index.handler
      Policies:
        - Statement:
          - 
            Sid: DynamoDBCrudPolicy
            Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:DeleteItem
              - dynamodb:PutItem
              - dynamodb:Scan
              - dynamodb:Query
              - dynamodb:UpdateItem
              - dynamodb:BatchWriteItem
              - dynamodb:BatchGetItem
              - dynamodb:DescribeTable
            Resource: 
              - !GetAtt DeviceTable.Arn
              - !Sub "${DeviceTable.Arn}/index/*"

  GetDevicesByUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/functions/ddb-getUserThings/
      Handler: index.handler
      Policies:
        - Statement:
            - 
              Sid: DynamoDBReadPolicy
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Scan
                - dynamodb:Query
                - dynamodb:BatchGetItem
                - dynamodb:DescribeTable
              Resource: 
                - !GetAtt DeviceTable.Arn
                - !Sub "${DeviceTable.Arn}/index/*"


  ##############################################################################

  DeviceTable:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: hashId
          AttributeType: S
        -
          AttributeName: sortId
          AttributeType: S
      KeySchema: 
        - 
          AttributeName: hashId
          KeyType: HASH
        - 
          AttributeName: sortId
          KeyType: RANGE
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:

  IotEndpointAddress:
    Description: The IoT Endpoint for this particular AWS account. 
    Value: !GetAtt IotEndpoint.IotEndpointAddress

  CognitoSMSRoleExternalId:
    Description: > 
      The random UUID generated for the trust policy of the IAM role used by
      Cognito to send SMS verification messages. 
    Value: !GetAtt CognitoSMSRoleExternalId.uuid

  AlexaDefaultEndpoint:
    Description: Used to configure skill in Alexa Developer Console. 
    Value: !GetAtt AlexaSkillFunction.Arn

  # Note - the URI below contains your Alexa developer account ID, which should
  # be considered a secret. You may want to remove this output from the template
  # in a production scenario to protect this secret value. 
  AlexaAuthorizationURI:
#    Condition: UpdateResourceCondition
    Description: Used to configure Account Linking in Alexa Developer Console.
    Value: 
      Fn::Join: 
        - ''
        - - !GetAtt CognitoDomain.FullDomain
          - '/oauth2/authorize?response_type=code&client_id='
          - !Ref CognitoAlexaAppClient
          - '&redirect_uri=https://pitangui.amazon.com/api/skill/link/'
          - !Ref AlexaVendorId
#          - !Sub 
#              - '{{resolve:secretsmanager:${AlexaSecretName}:SecretString:VendorId}}'
#              - { AlexaSecretName: !FindInMap [Config, Alexa, SecretName]}
          - '&state=STATE'
        
  AlexaAccessTokenURI:
    Description: Used to configure Account Linking in Alexa Developer Console.
    Value: 
      #https://alexa-test.auth.us-east-1.amazoncognito.com
      Fn::Join: 
        - ''
        - - !GetAtt CognitoDomain.FullDomain
          - '/oauth2/token?state=STATE'
  
  AlexaClientId: 
    Description: Used to configure Account Linking in Alexa Developer Console.
    Value: !Ref CognitoAlexaAppClient

  AlexaClientSecret:
    Description: >
      Used to configure Account Linking in Alexa Developer Console.  
      Paste this URL in the browser, scroll down, click 'Retrieve secret value',
      and use the value of the 'clientSecret' when configuring the Alexa skill.  
    Value: 
      Fn::Join:
        - ""
        - - "https://"
          - !Ref "AWS::Region"
          - ".console.aws.amazon.com/secretsmanager/home?region="
          - !Ref "AWS::Region"
          - "#/secret?name="
          - !GetAtt CognitoClientSecret.SecretName